require('dotenv').config();
const mongoose = require('mongoose');
const Language = require('./models/Language');
const Lesson = require('./models/Lesson');
const User = require('./models/User');
// --------------------------------
// üß† HELPER FUNCTIONS (Gi√∫p t·∫°o c·∫•u tr√∫c section)
// --------------------------------
function theory(heading, content) {
  return { type: 'theory', heading, content };
}
function demo(heading, html, css = '', js = '') {
  return { type: 'demo', heading, demoPayload: { html, css, js } };
}

// --------------------------------
// üìö DATA DEFINITIONS (NG√îN NG·ªÆ)
// --------------------------------
const LANGUAGE_DATA = [
  {
    id: 'html',
    name: 'HTML',
    summary: 'Ng√¥n ng·ªØ ƒë√°nh d·∫•u m√¥ t·∫£ c·∫•u tr√∫c trang web, n·ªÅn t·∫£ng c·ªßa m·ªçi ·ª©ng d·ª•ng web.',
    icon: 'FaHtml5',
    levels: [
      { level: 1, title: 'C∆° b·∫£n (Tags & Structure)', description: 'H·ªçc c√∫ ph√°p, th·∫ª, vƒÉn b·∫£n, ·∫£nh, li√™n k·∫øt, danh s√°ch.' },
      { level: 2, title: 'Trung c·∫•p (Forms & Media)', description: 'Form, media, meta tags, semantic, accessibility.' },
      { level: 3, title: 'N√¢ng cao (APIs & Canvas)', description: 'Canvas, SVG, dialog, responsive images, performance.' }
    ]
  },
  {
    id: 'css',
    name: 'CSS',
    summary: 'Ng√¥n ng·ªØ t·∫°o ki·ªÉu, ki·ªÉm so√°t giao di·ªán v√† tr√¨nh b√†y c·ªßa t√†i li·ªáu HTML.',
    icon: 'FaCss3',
    levels: [
      { level: 1, title: 'C∆° b·∫£n (Selectors & Box Model)', description: 'C√∫ ph√°p, b·ªô ch·ªçn, box model, m√†u s·∫Øc & ki·ªÉu ch·ªØ.' },
      { level: 2, title: 'Trung c·∫•p (Flexbox & Grid)', description: 'Flexbox v√† Grid ƒë·ªÉ x√¢y d·ª±ng layout; positioning; transform/transition.' },
      { level: 3, title: 'N√¢ng cao (Animation & Responsive)', description: 'Animation, media queries, variables, h√†m CSS hi·ªán ƒë·∫°i.' }
    ]
  },
  {
    id: 'js',
    name: 'JavaScript',
    summary: 'Ng√¥n ng·ªØ l·∫≠p tr√¨nh gi√∫p trang web t∆∞∆°ng t√°c, logic v√† nƒÉng ƒë·ªông.',
    icon: 'FaJs',
    levels: [
      { level: 1, title: 'C∆° b·∫£n (Variables & Functions)', description: 'Bi·∫øn, ki·ªÉu d·ªØ li·ªáu, to√°n t·ª≠, v√≤ng l·∫∑p, h√†m v√† scope.' },
      { level: 2, title: 'Trung c·∫•p (DOM & Asynchronous)', description: 'DOM, events, b·∫•t ƒë·ªìng b·ªô (Promise, async/await), Fetch API.' },
      { level: 3, title: 'N√¢ng cao (OOP & Modern ES)', description: 'Class/OOP, Modules, Array methods, Storage, Error handling.' }
    ]
  }
];

// --------------------------------
// üß© DATA DEFINITIONS (B√ÄI H·ªåC - HTML ƒë√£ ƒë∆∞·ª£c m·ªü r·ªông)
// --------------------------------
const LESSON_DATA = [
    // =================================================================
    // ===== HTML LEVEL 1 (C∆° b·∫£n) =====
    // =================================================================
    {
      id: 'html-01-introduction', langId: 'html', title: 'Gi·ªõi thi·ªáu HTML', level: 1, order: 1,
      sections: [
        theory('HTML l√† g√¨?', 'HTML (HyperText Markup Language) l√† ng√¥n ng·ªØ ƒë√°nh d·∫•u m√¥ t·∫£ c·∫•u tr√∫c cho trang web. M·ªçi th·ª© b·∫°n th·∫•y tr√™n trang web ƒë·ªÅu ƒë∆∞·ª£c ƒë·∫∑t trong c√°c th·∫ª HTML (tags).'),
        theory('C·∫•u tr√∫c t√†i li·ªáu c∆° b·∫£n', 'M·ªói t√†i li·ªáu HTML h·ª£p l·ªá ph·∫£i c√≥ 4 ph·∫ßn ch√≠nh: `<!DOCTYPE html>` (khai b√°o lo·∫°i), `<html>` (g·ªëc t√†i li·ªáu), `<head>` (th√¥ng tin metadata), v√† `<body>` (n·ªôi dung hi·ªÉn th·ªã).'),
        demo('T√†i li·ªáu HTML ƒë·∫ßu ti√™n',
`<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Trang ƒë·∫ßu ti√™n</title>
  </head>
<body>
  <h1>Xin ch√†o HTML!</h1>
  <p>ƒê√¢y l√† b√†i h·ªçc HTML ƒë·∫ßu ti√™n c·ªßa t√¥i.</p>
</body>
</html>`,
'body{font-family:sans-serif;color:#333}')
      ]
    },
    {
      id: 'html-02-text-formatting', langId: 'html', title: 'VƒÉn b·∫£n v√† ƒê·ªãnh d·∫°ng', level: 1, order: 2,
      sections: [
        theory('ƒêo·∫°n vƒÉn, Ng·∫Øt d√≤ng v√† ƒê∆∞·ªùng k·∫ª ngang', 'Th·∫ª `<p>` lu√¥n t·∫°o ra m·ªôt ƒëo·∫°n vƒÉn m·ªõi. Th·∫ª `<br>` (break) d√πng ƒë·ªÉ ng·∫Øt d√≤ng trong c√πng m·ªôt ƒëo·∫°n, c√≤n th·∫ª `<hr>` (horizontal rule) t·∫°o ƒë∆∞·ªùng ph√¢n c√°ch theo ch·ªß ƒë·ªÅ.'),
        demo('V√≠ d·ª• v·ªÅ c√°c kh·ªëi vƒÉn b·∫£n', 
`<p>ƒê√¢y l√† ƒëo·∫°n vƒÉn ƒë·∫ßu ti√™n. <br>S·ª≠ d·ª•ng th·∫ª "br" ƒë·ªÉ ng·∫Øt d√≤ng.</p>
<hr>
<p>ƒê√¢y l√† ƒëo·∫°n vƒÉn th·ª© hai, ƒë∆∞·ª£c ph√¢n c√°ch b·ªüi th·∫ª "hr".</p>`,
        ),
        theory('ƒê·ªãnh d·∫°ng √ù nghƒ©a (Semantic)', 'C√°c th·∫ª `<strong>` v√† `<em>` mang √Ω nghƒ©a ng·ªØ nghƒ©a quan tr·ªçng. `<strong>` ch·ªâ ra n·ªôi dung quan tr·ªçng/c·∫•p b√°ch (th∆∞·ªùng hi·ªÉn th·ªã **in ƒë·∫≠m**), c√≤n `<em>` ch·ªâ ra s·ª± nh·∫•n m·∫°nh (th∆∞·ªùng hi·ªÉn th·ªã *in nghi√™ng*).'),
        demo('Th·∫ª Strong v√† Emphasize', 
`<p>L∆∞u √Ω: <strong>JavaScript</strong> l√† ph·∫ßn <em>ph·ª©c t·∫°p nh·∫•t</em>.</p>`,
        'p{font-size:16px} strong{color:#dc2626}'),
        theory('ƒê·ªãnh d·∫°ng H√¨nh th·ª©c & S·ª≠a ƒë·ªïi', 'S·ª≠ d·ª•ng `<b>` (bold), `<i>` (italic) khi kh√¥ng c·∫ßn ng·ªØ nghƒ©a. Th·∫ª `<mark>` ƒë·ªÉ ƒë√°nh d·∫•u, `<del>` ƒë·ªÉ x√≥a v√† `<ins>` ƒë·ªÉ ch√®n n·ªôi dung.'),
        demo('Th·∫ª Mark, Del, Ins', 
`<p>Gi√°: <del>500,000 VND</del> <ins>350,000 VND</ins></p>
<p>T√™n t√†i li·ªáu l√†: <mark>index.html</mark></p>`,
        'ins{color:#10b981; text-decoration: none; font-weight: bold}'),
      ]
    },
    {
      id: 'html-03-links', langId: 'html', title: 'Li√™n k·∫øt (th·∫ª a)', level: 1, order: 3,
      sections: [
        theory('Th·∫ª <a> v√† Thu·ªôc t√≠nh href', 'Th·∫ª `<a>` t·∫°o si√™u li√™n k·∫øt, thu·ªôc t√≠nh `href` x√°c ƒë·ªãnh ƒë·ªãa ch·ªâ ƒë√≠ch.'),
        demo('Li√™n k·∫øt c∆° b·∫£n', `<a href="https://google.com">ƒê·∫øn Google</a><br><a href="bai-hoc-tiep-theo.html">B√†i sau</a>`, 'a{text-decoration:none;color:#0ea5e9;font-weight:bold}'),
        theory('target & Li√™n k·∫øt n·ªôi b·ªô', 'D√πng `target="_blank"` ƒë·ªÉ m·ªü tab m·ªõi. D√πng d·∫•u `#` ƒë·ªÉ t·∫°o li√™n k·∫øt n·ªôi b·ªô (neo) ƒë·∫øn m·ªôt `id` trong c√πng trang.'),
        demo('Li√™n k·∫øt n√¢ng cao', 
`<a href="mailto:contact@example.com">G·ª≠i Mail</a>
<a href="#footer">Xu·ªëng cu·ªëi trang</a>`,
        ),
      ]
    },
    {
      id: 'html-04-images', langId: 'html', title: 'H√¨nh ·∫£nh (img)', level: 1, order: 4,
      sections: [
        theory('Th·∫ª <img> v√† src/alt', 'Th·∫ª `<img>` d√πng ƒë·ªÉ nh√∫ng ·∫£nh. `src` l√† ƒë∆∞·ªùng d·∫´n, `alt` (text thay th·∫ø) b·∫Øt bu·ªôc cho accessibility v√† SEO.'),
        demo('Hi·ªÉn th·ªã h√¨nh ·∫£nh',
`<img src="https://placehold.co/400x200/505050/ffffff?text=Placeholder" alt="·∫¢nh minh h·ªça" title="·∫¢nh m√¥ t·∫£"/>`,
'img{border-radius:8px}'),
        theory('ƒê∆∞·ªùng d·∫´n c·ª•c b·ªô v√† title', 'Trong d·ª± √°n th·ª±c t·∫ø, b·∫°n s·∫Ω d√πng ƒë∆∞·ªùng d·∫´n c·ª•c b·ªô (v√≠ d·ª•: `src="./images/logo.png"`). Thu·ªôc t√≠nh `title` hi·ªÉn th·ªã ch√∫ th√≠ch khi r√™ chu·ªôt qua ·∫£nh.'),
        demo('·∫¢nh trong th∆∞ m·ª•c',
`<img src="images/logo.png" alt="Logo c√¥ng ty" style="max-width: 100px; height: auto"/>`,
'img{border:1px solid #ccc}'),
      ]
    },
    { id: 'html-05-lists', langId: 'html', title: 'Danh s√°ch UL/OL v√† DL', level: 1, order: 5,
      sections: [
        theory('Danh s√°ch Kh√¥ng th·ª© t·ª± (UL)', 'Th·∫ª `<ul>` t·∫°o danh s√°ch kh√¥ng th·ª© t·ª± (d√πng d·∫•u ch·∫•m tr√≤n). M·ªói m·ª•c l√† th·∫ª `<li>` (list item).'),
        demo('V√≠ d·ª• UL',
`<ul>
  <li>M√†u ƒê·ªè</li>
  <li>M√†u Xanh</li>
  <li>M√†u V√†ng</li>
</ul>`),
        theory('Danh s√°ch C√≥ th·ª© t·ª± (OL)', 'Th·∫ª `<ol>` t·∫°o danh s√°ch c√≥ th·ª© t·ª± (d√πng s·ªë, ch·ªØ c√°i). C√≥ th·ªÉ d√πng thu·ªôc t√≠nh `type="A"` ho·∫∑c `type="I"` ƒë·ªÉ thay ƒë·ªïi ki·ªÉu ƒë√°nh s·ªë.'),
        demo('V√≠ d·ª• OL (La M√£)',
`<ol type="I">
  <li>L·∫≠p k·∫ø ho·∫°ch</li>
  <li>Th·ª±c thi</li>
  <li>ƒê√°nh gi√°</li>
</ol>`),
        theory('Danh s√°ch M√¥ t·∫£ (DL)', 'Th·∫ª `<dl>` ch·ª©a c√°c thu·∫≠t ng·ªØ v√† m√¥ t·∫£ c·ªßa ch√∫ng. D√πng `<dt>` (description term) cho thu·∫≠t ng·ªØ v√† `<dd>` (description definition) cho m√¥ t·∫£.'),
        demo('V√≠ d·ª• DL',
`<dl>
  <dt>HTML</dt><dd>Ng√¥n ng·ªØ ƒë√°nh d·∫•u.</dd>
  <dt>CSS</dt><dd>Ng√¥n ng·ªØ t·∫°o ki·ªÉu.</dd>
</dl>`),
      ]
    },
    { id: 'html-06-tables', langId: 'html', title: 'B·∫£ng (table)', level: 1, order: 6,
      sections: [
        theory('C·∫•u tr√∫c B·∫£ng', 'S·ª≠ d·ª•ng `<table>` ch·ª©a `<thead>` (header), `<tbody>` (body). D√πng `<tr>` (row), `<th>` (table header), `<td>` (table data).'),
        demo('B·∫£ng c∆° b·∫£n',
`<table>
  <thead><tr><th>S·∫£n ph·∫©m</th><th>Gi√°</th></tr></thead>
  <tbody>
    <tr><td>Laptop</td><td>15,000,000</td></tr>
    <tr><td>Mouse</td><td>500,000</td></tr>
  </tbody>
</table>`,
'table{border-collapse:collapse;width:100%}th,td{border:1px solid #ccc;padding:10px;text-align:left}'),
        theory('G·ªôp √¥ (Colspan & Rowspan)', 'Thu·ªôc t√≠nh `colspan` g·ªôp c√°c c·ªôt. Thu·ªôc t√≠nh `rowspan` g·ªôp c√°c h√†ng.'),
        demo('B·∫£ng G·ªôp √¥',
`<table>
  <tr><th colspan="2">Th√¥ng tin</th></tr>
  <tr><td>T√™n</td><td>A</td></tr>
  <tr><td rowspan="2">ƒê·ªãa ch·ªâ</td><td>HN</td></tr>
  <tr><td>HCM</td></tr>
</table>`,
'table{border-collapse:collapse;width:100%}th,td{border:1px solid #ccc;padding:10px;text-align:left}'),
      ]
    },
    { id: 'html-07-forms', langId: 'html', title: 'Form nh·∫≠p li·ªáu c∆° b·∫£n', level: 1, order: 7,
      sections: [
        theory('Th·∫ª <form> & <label>', 'Th·∫ª `<form>` bao b·ªçc c√°c tr∆∞·ªùng nh·∫≠p li·ªáu. `<label>` li√™n k·∫øt nh√£n v·ªõi input (`for`/`id`) gi√∫p accessibility.'),
        demo('Form ƒëƒÉng k√Ω',
`<form action="#" method="post">
  <label for="name">T√™n:</label> <input type="text" id="name" required><br>
  <label for="mail">Email:</label> <input type="email" id="mail" required><br>
  <button>ƒêƒÉng k√Ω</button>
</form>`,
'input,button{margin-top:6px;padding:6px}'),
        theory('C√°c lo·∫°i Input ph·ªï bi·∫øn', 'C√°c lo·∫°i input quan tr·ªçng: `text`, `password`, `email`, `number`, `date`, `radio` (ch·ªçn 1), `checkbox` (ch·ªçn nhi·ªÅu).'),
        demo('Input Radio v√† Checkbox',
`<form>
  <input type="radio" id="m" name="gender" value="male"> <label for="m">Nam</label><br>
  <input type="checkbox" id="news" value="subscribe"> <label for="news">Nh·∫≠n tin</label><br>
  <textarea placeholder="Ghi ch√∫"></textarea>
</form>`,
'textarea{width:100%;margin-top:10px}'),
      ]
    },

    // =================================================================
    // ===== HTML LEVEL 2 (Trung c·∫•p) =====
    // =================================================================
    { id: 'html-08-media', langId: 'html', title: 'Audio & Video', level: 2, order: 8,
      sections: [
        theory('<audio>', 'D√πng th·∫ª `<audio>` ƒë·ªÉ nh√∫ng t·ªáp √¢m thanh. Thu·ªôc t√≠nh `controls` hi·ªÉn th·ªã tr√¨nh ph√°t, `autoplay` t·ª± ƒë·ªông ch·∫°y, `loop` l·∫∑p l·∫°i.'),
        demo('Ph√°t audio',
`<audio controls>
  <source src="https://interactive-examples.mdn.mozilla.net/media/examples/t-rex-roar.mp3" type="audio/mpeg">
  Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ audio.
</audio>`),
        theory('<video> v√† Ph·ª• ƒë·ªÅ', 'Th·∫ª `<video>` ƒë·ªÉ nh√∫ng t·ªáp video. `poster` l√† ·∫£nh hi·ªÉn th·ªã tr∆∞·ªõc khi video ch·∫°y. Th·∫ª `<track>` d√πng ƒë·ªÉ th√™m ph·ª• ƒë·ªÅ/ch√∫ th√≠ch.'),
        demo('Ph√°t video c√≥ poster',
`<video controls width="100%" poster="https://placehold.co/400x200?text=VIDEO">
  <source src="https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.webm" type="video/webm">
  <track kind="captions" src="subtitle.vtt" srclang="vi" label="Vietnamese (Example)">
  Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ video.
</video>`)
      ]
    },
    { id: 'html-09-semantic', langId: 'html', title: 'Semantic HTML', level: 2, order: 9,
      sections: [
        theory('√ù nghƒ©a Ng·ªØ nghƒ©a', 'S·ª≠ d·ª•ng c√°c th·∫ª nh∆∞ `<header>`, `<nav>`, `<main>`, `<section>`, `<article>`, `<aside>`, `<footer>` thay cho `<div>` ƒë·ªÉ m√°y t√¨m ki·∫øm (SEO) v√† tr√¨nh ƒë·ªçc m√†n h√¨nh hi·ªÉu r√µ c·∫•u tr√∫c n·ªôi dung.'),
        theory('Ph√¢n bi·ªát Article, Section, Aside', 
            '**<article>**: N·ªôi dung ƒë·ªôc l·∫≠p, c√≥ th·ªÉ t·ª± ƒë·ª©ng m·ªôt m√¨nh (v√≠ d·ª•: b√†i vi·∫øt blog, b√¨nh lu·∫≠n). \n**<section>**: Kh·ªëi n·ªôi dung theo ch·ªß ƒë·ªÅ (v√≠ d·ª•: ph·∫ßn gi·ªõi thi·ªáu, ph·∫ßn li√™n h·ªá). \n**<aside>**: N·ªôi dung li√™n quan nh∆∞ng ph·ª•, th∆∞·ªùng l√† sidebar ho·∫∑c ghi ch√∫.'
        ),
        demo('B·ªë c·ª•c semantic',
`<header><h1>T√™n Blog</h1><nav><a href="#">Menu</a></nav></header>
<main>
  <section>
    <h2>Tin t·ª©c m·ªõi</h2>
    <article><h3>B√†i 1</h3><p>N·ªôi dung...</p></article>
    <article><h3>B√†i 2</h3><p>N·ªôi dung...</p></article>
  </section>
  <aside>Qu·∫£ng c√°o</aside>
</main>
<footer>¬© 2025</footer>`,
'header,nav,main,section,article,aside,footer{border:1px dashed #ccc;padding:8px;margin-bottom:6px}'),
      ]
    },
    { id: 'html-10-forms-advanced', langId: 'html', title: 'Form n√¢ng cao & Validation', level: 2, order: 10,
      sections: [
        theory('Validation n√¢ng cao', 'S·ª≠ d·ª•ng `required`, `pattern` (Regex), `min`, `max`, `step` ƒë·ªÉ r√†ng bu·ªôc d·ªØ li·ªáu ƒë·∫ßu v√†o ph√≠a client-side (tr√¨nh duy·ªát).'),
        demo('Validation v·ªõi Pattern',
`<form>
  <label>M√£ SP (A-Z, 5 k√Ω t·ª±): <input type="text" pattern="[A-Z]{5}" required title="Ph·∫£i l√† 5 k√Ω t·ª± vi·∫øt hoa"></label>
  <label>S·ªë l∆∞·ª£ng (max 10): <input type="number" min="1" max="10" value="1"></label>
  <button>G·ª≠i</button>
</form>`),
        theory('Datalist v√† Autofocus', 'Th·∫ª `<datalist>` cung c·∫•p g·ª£i √Ω cho input (kh√¥ng √©p bu·ªôc). Thu·ªôc t√≠nh `autofocus` t·ª± ƒë·ªông ƒë·∫∑t con tr·ªè v√†o tr∆∞·ªùng input khi trang ƒë∆∞·ª£c t·∫£i.'),
        demo('Input v·ªõi Datalist',
`<label for="browser">Ch·ªçn tr√¨nh duy·ªát:</label>
<input list="browsers" id="browser" name="browser" autofocus>
<datalist id="browsers">
  <option value="Chrome">
  <option value="Firefox">
  <option value="Safari">
</datalist>`),
      ]
    },
    { id: 'html-11-responsive-images', langId: 'html', title: 'Responsive Images (srcset & picture)', level: 2, order: 11,
      sections: [
        theory('Thu·ªôc t√≠nh srcset v√† sizes', 'S·ª≠ d·ª•ng `srcset` cho ph√©p tr√¨nh duy·ªát ch·ªçn t·ªáp ·∫£nh t·ªëi ∆∞u nh·∫•t d·ª±a tr√™n ƒë·ªô ph√¢n gi·∫£i (w) ho·∫∑c m·∫≠t ƒë·ªô pixel (x) c·ªßa m√†n h√¨nh, gi√∫p tƒÉng t·ªëc ƒë·ªô t·∫£i trang.'),
        demo('S·ª≠ d·ª•ng srcset',
`<img 
  src="https://placehold.co/640x360" 
  srcset="https://placehold.co/320x180 320w, https://placehold.co/640x360 640w, https://placehold.co/1280x720 1280w" 
  sizes="(max-width: 640px) 320px, (max-width: 1024px) 640px, 1280px" 
  alt="Responsive Image Demo" style="max-width:100%; height: auto;">`),
        theory('Th·∫ª <picture>', 'Th·∫ª `<picture>` d√πng ƒë·ªÉ hi·ªÉn th·ªã c√°c t·ªáp ·∫£nh kh√°c nhau (v√≠ d·ª•: ƒë·ªãnh d·∫°ng WebP) ho·∫∑c c·∫Øt x√©n ·∫£nh kh√°c nhau t√πy theo Media Query (v√≠ d·ª•: hi·ªÉn th·ªã ·∫£nh vu√¥ng tr√™n mobile, ·∫£nh ngang tr√™n desktop).'),
        demo('Th·∫ª Picture cho c√°c ƒë·ªãnh d·∫°ng',
`<picture>
  <source srcset="image.webp" type="image/webp">
  <img src="https://placehold.co/400x200?text=JPG" alt="Fallback">
</picture>`),
      ]
    },

    // =================================================================
    // ===== HTML LEVEL 3 (N√¢ng cao) =====
    // =================================================================
    { id: 'html-12-svg-basics', langId: 'html', title: 'SVG c∆° b·∫£n', level: 3, order: 12,
      sections: [
        theory('SVG l√† g√¨?', 'SVG (Scalable Vector Graphics) l√† ƒë·ªãnh d·∫°ng ·∫£nh vector d·ª±a tr√™n XML. N√≥ s·∫Øc n√©t ·ªü m·ªçi k√≠ch th∆∞·ªõc m√† kh√¥ng b·ªã v·ª° v√† c√≥ th·ªÉ ƒë∆∞·ª£c thay ƒë·ªïi ki·ªÉu b·∫±ng CSS ho·∫∑c JavaScript.'),
        demo('V·∫Ω SVG c∆° b·∫£n',
`<svg width="200" height="100" viewBox="0 0 200 100">
  <rect x="10" y="10" width="180" height="80" fill="#65C7F7" rx="8"/>
  <circle cx="100" cy="50" r="30" fill="#0052D4"/>
  <text x="100" y="55" font-family="sans-serif" font-size="14" fill="white" text-anchor="middle">SVG</text>
</svg>`),
        theory('Nh√∫ng SVG (Inline vs File)', 'B·∫°n c√≥ th·ªÉ nh√∫ng tr·ª±c ti·∫øp m√£ SVG v√†o HTML (nh∆∞ tr√™n) ho·∫∑c nh√∫ng t·ª´ file SVG b√™n ngo√†i b·∫±ng th·∫ª `<img>` ho·∫∑c CSS `background-image`.'),
        demo('Nh√∫ng SVG b·∫±ng th·∫ª img',
`<img src="icon.svg" alt="Bi·ªÉu t∆∞·ª£ng" style="width: 50px; height: auto; border: 1px solid #ccc"/>`),
      ]
    },
    { id: 'html-13-dialog', langId: 'html', title: 'Dialog & Modal (native)', level: 3, order: 13,
      sections: [
        theory('<dialog>', 'Th·∫ª `<dialog>` cung c·∫•p ch·ª©c nƒÉng modal (h·ªôp tho·∫°i) g·ªëc c·ªßa tr√¨nh duy·ªát. N√≥ c√≥ th·ªÉ ƒë∆∞·ª£c m·ªü b·∫±ng ph∆∞∆°ng th·ª©c JavaScript `dialog.showModal()`.'),
        theory('ƒê√≥ng Dialog', 'C√°ch t·ªët nh·∫•t ƒë·ªÉ ƒë√≥ng `dialog` l√† s·ª≠ d·ª•ng m·ªôt `<form>` b√™n trong v·ªõi `method="dialog"`. Khi n√∫t trong form n√†y ƒë∆∞·ª£c nh·∫•n, dialog s·∫Ω t·ª± ƒë·ªông ƒë√≥ng v√† form s·∫Ω kh√¥ng g·ª≠i d·ªØ li·ªáu.'),
        demo('V√≠ d·ª• dialog',
`<button id="open">M·ªü dialog</button>
<dialog id="dlg">
  <h3>B·∫°n c√≥ ch·∫Øc ch·∫Øn?</h3>
  <p>H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.</p>
  <form method="dialog">
    <button>ƒê√≥ng</button>
  </form>
</dialog>`,
'',
`const dlg = document.getElementById('dlg');
const btn = document.getElementById('open');
btn.addEventListener('click', ()=> dlg.showModal());`)
      ]
    },
    { id: 'html-14-accessibility', langId: 'html', title: 'Accessibility c∆° b·∫£n (ARIA)', level: 3, order: 14,
      sections: [
        theory('ARIA l√† g√¨?', 'ARIA (Accessible Rich Internet Applications) l√† t·∫≠p h·ª£p c√°c thu·ªôc t√≠nh HTML gi√∫p c·∫£i thi·ªán kh·∫£ nƒÉng truy c·∫≠p cho ng∆∞·ªùi d√πng khuy·∫øt t·∫≠t, ƒë·∫∑c bi·ªát l√† ng∆∞·ªùi d√πng tr√¨nh ƒë·ªçc m√†n h√¨nh.'),
        theory('C√°c thu·ªôc t√≠nh ch√≠nh', 'C√°c thu·ªôc t√≠nh ARIA quan tr·ªçng bao g·ªìm: \n* `aria-label`: Cung c·∫•p nh√£n m√¥ t·∫£ cho c√°c th√†nh ph·∫ßn kh√¥ng c√≥ text (v√≠ d·ª•: n√∫t icon).\n* `role`: ƒê·ªãnh nghƒ©a vai tr√≤ c·ªßa m·ªôt ph·∫ßn t·ª≠ (v√≠ d·ª•: `role="alert"` cho th√¥ng b√°o, `role="button"` cho `<div>` ho·∫°t ƒë·ªông nh∆∞ n√∫t).'),
        demo('ARIA cho n√∫t icon',
`<button aria-label="T√¨m ki·∫øm" class="icon-btn">üîç</button>
<div role="alert" style="padding: 10px; border: 1px solid red;">Th√¥ng b√°o l·ªói!</div>`,
        '.icon-btn{padding: 8px; font-size: 20px;}'),
        theory('ARIA cho Form v√† Tr·∫°ng th√°i', 'S·ª≠ d·ª•ng `aria-required`, `aria-expanded` (ƒëang m·ªü hay ƒë√≥ng), v√† `aria-invalid` (d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá) ƒë·ªÉ th√¥ng b√°o tr·∫°ng th√°i ch√≠nh x√°c cho ng∆∞·ªùi d√πng.'),
        demo('ARIA cho Validation',
`<form>
  <label>T√™n: <input type="text" aria-required="true" aria-invalid="false"></label>
  <p aria-live="polite" style="margin-top: 5px;">*Vui l√≤ng nh·∫≠p t√™n</p>
</form>`),
      ]
    },


    // =================================================================
    // ===== CSS LEVEL 1 (C∆° b·∫£n) ===== (Gi·ªØ nguy√™n)
    // =================================================================
    {
      id: 'css-01-introduction', langId: 'css', title: 'C√∫ ph√°p & K·∫øt n·ªëi CSS', level: 1, order: 1,
      sections: [
        theory('C√∫ ph√°p', 'C·∫•u tr√∫c `selector { property: value; }`'),
        theory('C√°ch nh√∫ng', 'Inline, Internal, External (khuy·∫øn ngh·ªã).'),
        demo('Internal Style',
`<p>ƒêo·∫°n vƒÉn ƒë∆∞·ª£c t·∫°o ki·ªÉu.</p>
<div id="box">H·ªôp xanh</div>`,
`p{color:red;font-size:20px}
#box{background:#3b82f6;padding:10px;color:#fff}`)
      ]
    },
    {
      id: 'css-02-box-model', langId: 'css', title: 'M√¥ h√¨nh h·ªôp (Box Model)', level: 1, order: 2,
      sections: [
        theory('4 th√†nh ph·∫ßn', '`Content`, `Padding`, `Border`, `Margin`.'),
        demo('Th·ª±c h√†nh',
`<div class="box">Content</div>`,
`.box{width:150px;height:50px;background:lightgreen;padding:15px;border:5px solid darkgreen;margin:20px;text-align:center}`)
      ]
    },
    {
      id: 'css-03-typography-colors', langId: 'css', title: 'Ki·ªÉu ch·ªØ & M√†u s·∫Øc', level: 1, order: 3,
      sections: [
        theory('Font & line-height', 'Ch·ªçn font d·ªÖ ƒë·ªçc; `line-height` 1.4‚Äì1.8.'),
        demo('V√≠ d·ª•',
`<h1>Ti√™u ƒë·ªÅ</h1><p>ƒêo·∫°n vƒÉn c√≥ line-height t·ªët.</p>`,
`body{font-family:sans-serif}h1{color:#0052D4}p{line-height:1.6;color:#333}`)
      ]
    },
    {
      id: 'css-04-backgrounds-borders', langId: 'css', title: 'N·ªÅn & Vi·ªÅn', level: 1, order: 4,
      sections: [
        theory('Background', '`background-color`, `background-image`, gradient.'),
        demo('Gradient',
`<div class="card">Card</div>`,
`.card{padding:16px;color:#fff;border-radius:8px;background:linear-gradient(90deg,#0052D4,#65C7F7)}`)
      ]
    },
    {
      id: 'css-05-display-visibility', langId: 'css', title: 'Display & Visibility', level: 1, order: 5,
      sections: [
        theory('display', '`block`, `inline`, `inline-block`, `none`.'),
        demo('V√≠ d·ª•',
`<span class="a">A</span><span class="b">B</span>`,
`.a{display:inline-block;width:40px;height:40px;background:#4364F7;color:#fff;text-align:center}
.b{display:none}`)
      ]
    },

    // =================================================================
    // ===== CSS LEVEL 2 (Trung c·∫•p) ===== (Gi·ªØ nguy√™n)
    // =================================================================
    {
      id: 'css-06-flexbox', langId: 'css', title: 'Flexbox c∆° b·∫£n', level: 2, order: 6,
      sections: [
        theory('Tr·ª•c & cƒÉn ch·ªânh', '`display:flex`, `justify-content`, `align-items`.'),
        demo('H√†ng ngang',
`<div class="row"><div>1</div><div>2</div><div>3</div></div>`,
`.row{display:flex;gap:8px}
.row>div{flex:1;background:#EAF4FF;padding:12px;text-align:center}`)
      ]
    },
    {
      id: 'css-07-grid', langId: 'css', title: 'CSS Grid c∆° b·∫£n', level: 2, order: 7,
      sections: [
        theory('L∆∞·ªõi 2D', '`display:grid`, `grid-template-columns`, `gap`.'),
        demo('L∆∞·ªõi 3 c·ªôt',
`<div class="grid">
  <div>A</div><div>B</div><div>C</div><div>D</div>
</div>`,
`.grid{display:grid;grid-template-columns:repeat(3,1fr);gap:8px}
.grid>div{background:#CFE7FF;padding:12px;text-align:center}`)
      ]
    },
    {
      id: 'css-08-positioning', langId: 'css', title: 'Positioning', level: 2, order: 8,
      sections: [
        theory('relative/absolute/fixed/sticky', 'ƒêi·ªÅu khi·ªÉn v·ªã tr√≠ ph·∫ßn t·ª≠.'),
        demo('Badge g√≥c',
`<div class="wrap">Card<div class="badge">NEW</div></div>`,
`.wrap{position:relative;background:#EAF4FF;padding:24px;border-radius:8px}
.badge{position:absolute;top:8px;right:8px;background:#0052D4;color:#fff;padding:4px 8px;border-radius:999px}`)
      ]
    },
    {
      id: 'css-09-transform-transition', langId: 'css', title: 'Transform & Transition', level: 2, order: 9,
      sections: [
        theory('Hi·ªáu ·ª©ng m∆∞·ª£t', '`transform`, `transition` gi√∫p UI s·ªëng ƒë·ªông.'),
        demo('Hover scale',
`<button class="btn">Hover me</button>`,
`.btn{background:#0052D4;color:#fff;border:none;padding:10px 16px;border-radius:8px;transition:transform .2s}
.btn:hover{transform:scale(1.05)}`)
      ]
    },

    // =================================================================
    // ===== CSS LEVEL 3 (N√¢ng cao) ===== (Gi·ªØ nguy√™n)
    // =================================================================
    {
      id: 'css-10-animations', langId: 'css', title: 'Animation', level: 3, order: 10,
      sections: [
        theory('keyframes', 'ƒê·ªãnh nghƒ©a chuy·ªÉn ƒë·ªông khung h√¨nh.'),
        demo('Pulse',
`<div class="dot"></div>`,
`.dot{width:24px;height:24px;border-radius:50%;background:#65C7F7;animation:pulse 1.2s infinite}
@keyframes pulse{0%{transform:scale(1)}50%{transform:scale(1.2)}100%{transform:scale(1)}}`)
      ]
    },
    {
      id: 'css-11-media-queries', langId: 'css', title: 'Responsive v·ªõi Media Queries', level: 3, order: 11,
      sections: [
        theory('Breakpoint', 'ƒêi·ªÅu ch·ªânh layout theo k√≠ch th∆∞·ªõc m√†n h√¨nh.'),
        demo('2 c·ªôt ‚Üí 1 c·ªôt',
`<div class="layout"><div>Tr√°i</div><div>Ph·∫£i</div></div>`,
`.layout{display:grid;grid-template-columns:1fr 1fr;gap:12px}
@media(max-width:640px){.layout{grid-template-columns:1fr}}`)
      ]
    },
    {
      id: 'css-12-variables-modern', langId: 'css', title: 'CSS Variables & H√†m hi·ªán ƒë·∫°i', level: 3, order: 12,
      sections: [
        theory('Custom properties', 'Khai b√°o ·ªü :root; d√πng `var(--name)`.'),
        demo('Theme nhanh',
`<div class="card">Card</div>`,
`:root{--brand:#0052D4}
.card{background:var(--brand);color:#fff;padding:16px;border-radius:8px}`)
      ]
    },

    // =================================================================
    // ===== JS LEVEL 1 (C∆° b·∫£n) ===== (Gi·ªØ nguy√™n)
    // =================================================================
    {
      id: 'js-01-variables', langId: 'js', title: 'Bi·∫øn (var, let, const)', level: 1, order: 1,
      sections: [
        theory('Bi·∫øn & khai b√°o', '`let`/`const` hi·ªán ƒë·∫°i (tr√°nh d√πng `var` tr·ª´ khi c·∫ßn).'),
        demo('Ki·ªÉm tra typeof',
`<p id="result"></p>`, '',
`const name = 'John';
let age = 25;
let active = true;
document.getElementById('result').innerHTML = 'name: '+typeof name+', age: '+typeof age+', active: '+typeof active;`)
      ]
    },
    {
      id: 'js-02-functions', langId: 'js', title: 'H√†m & Tham s·ªë', level: 1, order: 2,
      sections: [
        theory('Function & Arrow', 'Kh√°c nhau ·ªü `this` v√† c√∫ ph√°p.'),
        demo('V√≠ d·ª•',
`<p id="out"></p>`, '',
`function area(w,h){return w*h}
const perim=(w,h)=>2*(w+h)
document.getElementById('out').innerHTML = 'S= '+area(5,4)+', P= '+perim(5,4)`)
      ]
    },
    {
      id: 'js-03-arrays-objects', langId: 'js', title: 'M·∫£ng & ƒê·ªëi t∆∞·ª£ng', level: 1, order: 3,
      sections: [
        theory('C·∫•u tr√∫c d·ªØ li·ªáu', 'M·∫£ng l∆∞u danh s√°ch; Object l∆∞u c·∫∑p key‚Äìvalue.'),
        demo('Thao t√°c c∆° b·∫£n',
`<pre id="out"></pre>`, '',
`const langs=['HTML','CSS','JS'];
const dev={name:'Lan',skills:langs};
document.getElementById('out').textContent = JSON.stringify(dev,null,2);`)
      ]
    },
    {
      id: 'js-04-control-flow', langId: 'js', title: 'ƒêi·ªÅu ki·ªán & V√≤ng l·∫∑p', level: 1, order: 4,
      sections: [
        theory('if/else; for; while', 'ƒêi·ªÅu khi·ªÉn lu·ªìng ch∆∞∆°ng tr√¨nh.'),
        demo('T√≠nh t·ªïng 1..N',
`<input id="n" type="number" value="5"> <button id="run">T√≠nh</button>
<p id="sum"></p>`, '',
`document.getElementById('run').onclick=()=>{
  const N=+document.getElementById('n').value;
  let s=0;for(let i=1;i<=N;i++) s+=i;
  document.getElementById('sum').textContent='T·ªïng = '+s;
}`)
      ]
    },

    // =================================================================
    // ===== JS LEVEL 2 (Trung c·∫•p) ===== (Gi·ªØ nguy√™n)
    // =================================================================
    {
      id: 'js-05-dom-basics', langId: 'js', title: 'DOM c∆° b·∫£n', level: 2, order: 5,
      sections: [
        theory('Ch·ªçn & thao t√°c', '`getElementById`, `querySelector`, ch·ªânh `textContent`, `classList`.'),
        demo('Toggle class',
`<div id="box" class="card">Box</div>
<button id="tgl">Toggle highlight</button>`,
`.card{padding:12px;border:1px solid #ccc}
.highlight{background:#FFFAE6}`,
`const b=document.getElementById('box');
document.getElementById('tgl').onclick=()=>b.classList.toggle('highlight');`)
      ]
    },
    {
      id: 'js-06-events', langId: 'js', title: 'S·ª± ki·ªán', level: 2, order: 6,
      sections: [
        theory('addEventListener', 'L·∫Øng nghe click, input, keydown...'),
        demo('Counter',
`<button id="inc">+</button> <span id="c">0</span> <button id="dec">-</button>`, '',
`let x=0;const c=document.getElementById('c');
document.getElementById('inc').onclick=()=>{x++;c.textContent=x}
document.getElementById('dec').onclick=()=>{x--;c.textContent=x}`)
      ]
    },
    {
      id: 'js-07-async-fetch', langId: 'js', title: 'B·∫•t ƒë·ªìng b·ªô & Fetch API', level: 2, order: 7,
      sections: [
        theory('Promise & async/await', 'X·ª≠ l√Ω t√°c v·ª• I/O kh√¥ng ch·∫∑n UI.'),
        demo('Fetch JSON (demo)',
`<button id="load">T·∫£i d·ªØ li·ªáu</button>
<pre id="data"></pre>`, '',
`document.getElementById('load').onclick=async()=>{
  const res = await fetch('https://jsonplaceholder.typicode.com/todos/1');
  const json = await res.json();
  document.getElementById('data').textContent = JSON.stringify(json,null,2);
}`)
      ]
    },
    {
      id: 'js-08-error-handling', langId: 'js', title: 'X·ª≠ l√Ω l·ªói (try/catch)', level: 2, order: 8,
      sections: [
        theory('try/catch/finally', 'Gi√∫p ch∆∞∆°ng tr√¨nh ·ªïn ƒë·ªãnh khi c√≥ ngo·∫°i l·ªá.'),
        demo('V√≠ d·ª•',
`<button id="run">Run</button>
<pre id="out"></pre>`, '',
`document.getElementById('run').onclick=()=>{
  try{ throw new Error('L·ªói demo'); }
  catch(e){ document.getElementById('out').textContent=e.message; }
  finally{ console.log('done'); }
}`)
      ]
    },

    // =================================================================
    // ===== JS LEVEL 3 (N√¢ng cao) ===== (Gi·ªØ nguy√™n)
    // =================================================================
    {
      id: 'js-09-oop-classes', langId: 'js', title: 'L·∫≠p tr√¨nh H∆∞·ªõng ƒë·ªëi t∆∞·ª£ng (Class)', level: 3, order: 9,
      sections: [
        theory('class & constructor', 'ƒê·ªãnh nghƒ©a khu√¥n m·∫´u ƒë·ªëi t∆∞·ª£ng.'),
        demo('V√≠ d·ª• l·ªõp',
`<pre id="out"></pre>`, '',
`class Person{constructor(name){this.name=name} greet(){return 'Hi '+this.name}}
const p=new Person('Lan');
document.getElementById('out').textContent=p.greet();`)
      ]
    },
    {
      id: 'js-10-array-methods', langId: 'js', title: 'Array methods hi·ªán ƒë·∫°i', level: 3, order: 10,
      sections: [
        theory('map/filter/reduce', 'X·ª≠ l√Ω d·ªØ li·ªáu m·∫£ng ng·∫Øn g·ªçn.'),
        demo('T√≠nh t·ªïng gi√°',
`<pre id="out"></pre>`, '',
`const cart=[{name:'A',price:10},{name:'B',price:15}];
const total=cart.reduce((s,i)=>s+i.price,0);
document.getElementById('out').textContent='T·ªïng: '+total;`)
      ]
    },
    {
      id: 'js-11-storage-json', langId: 'js', title: 'localStorage & JSON', level: 3, order: 11,
      sections: [
        theory('L∆∞u nh·∫π ph√≠a client', 'D√πng JSON.stringify/parse ƒë·ªÉ l∆∞u ƒë·ªëi t∆∞·ª£ng.'),
        demo('L∆∞u & t·∫£i',
`<button id="save">L∆∞u</button> <button id="load">T·∫£i</button>
<pre id="out"></pre>`, '',
`document.getElementById('save').onclick=()=>{
  const user={name:'Lan',score:100};
  localStorage.setItem('user', JSON.stringify(user));
}
document.getElementById('load').onclick=()=>{
  const u=JSON.parse(localStorage.getItem('user')||'null');
  document.getElementById('out').textContent=JSON.stringify(u,null,2);
}`)
      ]
    },
    {
      id: 'js-12-modules-overview', langId: 'js', title: 'Modules (overview)', level: 3, order: 12,
      sections: [
        theory('ES Modules', 'S·ª≠ d·ª•ng `import`/`export` (m√¥i tr∆∞·ªùng bundler ho·∫∑c type="module").'),
        demo('Minh ho·∫° (pseudo)',
`<p>V√≠ d·ª• modules c·∫ßn bundler ho·∫∑c file t√°ch ri√™ng. ·ªû ƒë√¢y minh ho·∫° kh√°i ni·ªám.</p>`,
'',
`// export const add=(a,b)=>a+b
// import { add } from './math.js'
// console.log(add(2,3))`)
      ]
    }
];
const USER_DATA = [
  {
    name: 'Admin H·ªçc Code',
    email: 'admin@learncode.com',
    password: 'password123',
    role: 'admin',
    avatar: 'https://i.pravatar.cc/150?img=6',
    
    // TH√îNG S·ªê TI·∫æN TR√åNH KH·ªûI T·∫†O:
    totalXp: 500, 
    currentStreak: 10,
    lessonsCompletedCount: 30,
    lastActivityDate: new Date(), 
  },
  {
    name: 'Dev Luy·ªán',
    email: 'devluyen@learncode.com',
    password: 'password123',
    role: 'user',
    avatar: 'https://i.pravatar.cc/150?img=1',
    
    // TH√îNG S·ªê TI·∫æN TR√åNH KH·ªûI T·∫†O:
    totalXp: 1200, 
    currentStreak: 25,
    lessonsCompletedCount: 58,
    lastActivityDate: new Date(),
  },
  {
    name: 'H·ªçc Vi√™n A',
    email: 'userA@learncode.com',
    password: 'password123',
    role: 'user',
    avatar: 'https://i.pravatar.cc/150?img=2',
    
    // TH√îNG S·ªê TI·∫æN TR√åNH KH·ªûI T·∫†O:
    totalXp: 100, 
    currentStreak: 0,
    lessonsCompletedCount: 5,
    lastActivityDate: null,
  },
];


// --------------------------------
// üöÄ RUN LOGIC (T·ªëi ∆∞u h√≥a logic th·ª±c thi)
// --------------------------------
async function run() {
  await mongoose.connect(process.env.MONGO_URI);

  // X√≥a d·ªØ li·ªáu c≈© song song (t·ªëi ∆∞u)
  console.log('üîÑ ƒêang x√≥a d·ªØ li·ªáu c≈©...');
  await Promise.all([
    Language.deleteMany({}),
    Lesson.deleteMany({}),
    User.deleteMany({})
  ]);

  // T·∫°o d·ªØ li·ªáu Languages song song (t·ªëi ∆∞u)
  console.log('üèóÔ∏è ƒêang t·∫°o Language (HTML, CSS, JS)...');
  await Promise.all(
    LANGUAGE_DATA.map(lang => Language.create(lang))
  );

  // T·∫°o d·ªØ li·ªáu Lessons
  console.log('üß© ƒêang t·∫°o Lessons (T·ªïng c·ªông 36 b√†i h·ªçc)...');
  await Lesson.create(LESSON_DATA);
   console.log('üë• ƒêang t·∫°o User (Admin v√† User th∆∞·ªùng)...');
  await Promise.all(
    USER_DATA.map(user => User.create(user))
  );

  console.log('‚úÖ Seed ƒë·∫ßy ƒë·ªß cho HTML, CSS, JS (Levels 1‚Üí3) ƒë√£ ƒë∆∞·ª£c t·∫°o!');
  await mongoose.disconnect();

 
}

run().catch((e)=>{
  console.error('‚ùå L·ªói x·∫£y ra trong qu√° tr√¨nh seeding:', e);
  process.exit(1);
});